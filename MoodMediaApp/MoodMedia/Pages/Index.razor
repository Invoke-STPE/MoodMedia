@page "/"
@using MoodMedia.Authentication
@using MoodMedia.Pages.Account
@using MoodMedia.Pages.Components
@using SpotifyAPI.Web

@inject NavigationManager navManager
@inject IJSRuntime _js
@inject IConfiguration _config
@inject AuthenticationStateProvider authStateProvider



<AuthorizeView>
    <Authorized>
        <WeatherComponent />
       <MusicPlayerComponent />
    </Authorized>
    <NotAuthorized>
        <LoginComponent />
    </NotAuthorized>
</AuthorizeView>




@code {

    [CascadingParameter]
    public Task<AuthenticationState> _authenticationState { get; set; }

    private SpotifyClient _spotifyClient;
    private Dictionary<string, string> fragmentParams;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (isAccessCodeReceived())
        {
            SpotifyClient spotifyClient = new SpotifyClient(fragmentParams["access_token"]);
            PrivateUser privateUser = await spotifyClient.UserProfile.Current();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new AuthUser
                {
                    AccessToken = fragmentParams["access_token"],
                    DisplayName = privateUser.DisplayName,
                });
            fragmentParams = new Dictionary<string, string>();
            navManager.NavigateTo("/");
        }
    }

    private bool isAccessCodeReceived()
    {
        var uri = new Uri(navManager.Uri);
        var maxLen = Math.Min(1, uri.Fragment.Length);
        fragmentParams = uri.Fragment.Substring(maxLen)?
          .Split("&", StringSplitOptions.RemoveEmptyEntries)?
          .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
          .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

        return fragmentParams.ContainsKey("access_token");
    }


}